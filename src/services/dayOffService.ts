import { format, startOfWeek, addDays, isAfter, isBefore, parseISO } from 'date-fns';
import { storageService } from './storage';
import { DailyWorkStatus } from '../types';

/**
 * ‚úÖ Service qu·∫£n l√Ω ng√†y ngh·ªâ th√¥ng th∆∞·ªùng
 * T·ª± ƒë·ªông ƒë·∫∑t t·∫•t c·∫£ ng√†y Ch·ªß Nh·∫≠t l√† ng√†y ngh·ªâ th√¥ng th∆∞·ªùng
 */
export class DayOffService {
  
  /**
   * ‚úÖ Ki·ªÉm tra xem m·ªôt ng√†y c√≥ ph·∫£i l√† Ch·ªß Nh·∫≠t kh√¥ng
   */
  private isSunday(date: Date): boolean {
    return date.getDay() === 0;
  }

  /**
   * ‚úÖ T·∫°o DailyWorkStatus cho ng√†y ngh·ªâ th√¥ng th∆∞·ªùng
   */
  private createDayOffStatus(): DailyWorkStatus {
    return {
      status: 'day_off',
      appliedShiftIdForDay: undefined,
      vaoLogTime: undefined,
      raLogTime: undefined,
      standardHoursScheduled: 0,
      otHoursScheduled: 0,
      sundayHoursScheduled: 0,
      nightHoursScheduled: 0,
      totalHoursScheduled: 0,
      lateMinutes: 0,
      earlyMinutes: 0,
      isHolidayWork: false,
      isManualOverride: false, // ƒê√¢y l√† t·ª± ƒë·ªông, kh√¥ng ph·∫£i th·ªß c√¥ng
    };
  }

  /**
   * ‚úÖ ƒê·∫∑t ng√†y ngh·ªâ th√¥ng th∆∞·ªùng cho m·ªôt ng√†y c·ª• th·ªÉ
   */
  async setDayOff(date: string): Promise<void> {
    try {
      const dayOffStatus = this.createDayOffStatus();
      await storageService.setDailyWorkStatusForDate(date, dayOffStatus);
      console.log(`‚úÖ DayOffService: Set day off for ${date}`);
    } catch (error) {
      console.error('‚ùå DayOffService: Error setting day off:', error);
    }
  }

  /**
   * ‚úÖ ƒê·∫∑t t·∫•t c·∫£ ng√†y Ch·ªß Nh·∫≠t trong tu·∫ßn hi·ªán t·∫°i l√† ng√†y ngh·ªâ th√¥ng th∆∞·ªùng
   */
  async setCurrentWeekSundaysAsDayOff(): Promise<void> {
    try {
      const today = new Date();
      const startOfCurrentWeek = startOfWeek(today, { weekStartsOn: 1 }); // Th·ª© Hai
      
      // T√¨m ng√†y Ch·ªß Nh·∫≠t trong tu·∫ßn (index 6)
      const sunday = addDays(startOfCurrentWeek, 6);
      const sundayString = format(sunday, 'yyyy-MM-dd');
      
      // Ki·ªÉm tra xem ƒë√£ c√≥ status cho ng√†y n√†y ch∆∞a
      const existingStatus = await storageService.getDailyWorkStatusForDate(sundayString);
      
      // Ch·ªâ ƒë·∫∑t l√†m ng√†y ngh·ªâ n·∫øu ch∆∞a c√≥ status ho·∫∑c status hi·ªán t·∫°i l√† pending
      if (!existingStatus || existingStatus.status === 'pending') {
        await this.setDayOff(sundayString);
        console.log(`‚úÖ DayOffService: Set Sunday ${sundayString} as day off`);
      } else {
        console.log(`‚ÑπÔ∏è DayOffService: Sunday ${sundayString} already has status: ${existingStatus.status}`);
      }
    } catch (error) {
      console.error('‚ùå DayOffService: Error setting current week Sundays:', error);
    }
  }

  /**
   * ‚úÖ ƒê·∫∑t t·∫•t c·∫£ ng√†y Ch·ªß Nh·∫≠t trong kho·∫£ng th·ªùi gian l√† ng√†y ngh·ªâ th√¥ng th∆∞·ªùng
   */
  async setSundaysAsDayOffInRange(startDate: Date, endDate: Date): Promise<void> {
    try {
      const current = new Date(startDate);
      const sundaysSet: string[] = [];
      
      while (current <= endDate) {
        if (this.isSunday(current)) {
          const dateString = format(current, 'yyyy-MM-dd');
          
          // Ki·ªÉm tra xem ƒë√£ c√≥ status cho ng√†y n√†y ch∆∞a
          const existingStatus = await storageService.getDailyWorkStatusForDate(dateString);
          
          // Ch·ªâ ƒë·∫∑t l√†m ng√†y ngh·ªâ n·∫øu ch∆∞a c√≥ status ho·∫∑c status hi·ªán t·∫°i l√† pending
          if (!existingStatus || existingStatus.status === 'pending') {
            await this.setDayOff(dateString);
            sundaysSet.push(dateString);
          }
        }
        
        current.setDate(current.getDate() + 1);
      }
      
      console.log(`‚úÖ DayOffService: Set ${sundaysSet.length} Sundays as day off:`, sundaysSet);
    } catch (error) {
      console.error('‚ùå DayOffService: Error setting Sundays in range:', error);
    }
  }

  /**
   * ‚úÖ ƒê·∫∑t t·∫•t c·∫£ ng√†y Ch·ªß Nh·∫≠t trong th√°ng hi·ªán t·∫°i l√† ng√†y ngh·ªâ th√¥ng th∆∞·ªùng
   */
  async setCurrentMonthSundaysAsDayOff(): Promise<void> {
    try {
      const today = new Date();
      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
      
      await this.setSundaysAsDayOffInRange(startOfMonth, endOfMonth);
    } catch (error) {
      console.error('‚ùå DayOffService: Error setting current month Sundays:', error);
    }
  }

  /**
   * ‚úÖ Ki·ªÉm tra xem m·ªôt ng√†y c√≥ ph·∫£i l√† ng√†y ngh·ªâ th√¥ng th∆∞·ªùng kh√¥ng
   */
  async isDayOff(date: string): Promise<boolean> {
    try {
      const status = await storageService.getDailyWorkStatusForDate(date);
      return status?.status === 'day_off';
    } catch (error) {
      console.error('‚ùå DayOffService: Error checking day off:', error);
      return false;
    }
  }

  /**
   * ‚úÖ X√≥a tr·∫°ng th√°i ng√†y ngh·ªâ th√¥ng th∆∞·ªùng (chuy·ªÉn v·ªÅ pending)
   */
  async removeDayOff(date: string): Promise<void> {
    try {
      await storageService.removeDailyWorkStatusForDate(date);
      console.log(`‚úÖ DayOffService: Removed day off status for ${date}`);
    } catch (error) {
      console.error('‚ùå DayOffService: Error removing day off:', error);
    }
  }

  /**
   * ‚úÖ Kh·ªüi t·∫°o ng√†y ngh·ªâ th√¥ng th∆∞·ªùng cho ·ª©ng d·ª•ng
   * G·ªçi khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ Ch·ªß Nh·∫≠t ƒë∆∞·ª£c ƒë·∫∑t l√†m ng√†y ngh·ªâ
   */
  async initializeDayOffs(): Promise<void> {
    try {
      console.log('üîÑ DayOffService: Initializing day offs...');
      
      // ƒê·∫∑t Ch·ªß Nh·∫≠t tu·∫ßn hi·ªán t·∫°i
      await this.setCurrentWeekSundaysAsDayOff();
      
      // ƒê·∫∑t t·∫•t c·∫£ Ch·ªß Nh·∫≠t trong th√°ng hi·ªán t·∫°i
      await this.setCurrentMonthSundaysAsDayOff();
      
      console.log('‚úÖ DayOffService: Day offs initialization completed');
    } catch (error) {
      console.error('‚ùå DayOffService: Error initializing day offs:', error);
    }
  }
}

/**
 * ‚úÖ Instance singleton c·ªßa DayOffService
 */
export const dayOffService = new DayOffService();
