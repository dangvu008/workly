/**
 * ‚úÖ Script d·ªçn d·∫πp c√°c file icon c≈© v√† kh√¥ng c·∫ßn thi·∫øt
 * Lo·∫°i b·ªè c√°c component icon ph·ª©c t·∫°p, gi·ªØ l·∫°i WorklyIcon ƒë∆°n gi·∫£n
 */

const fs = require('fs');
const path = require('path');

const filesToRemove = [
  'src/components/OptimizedIcon.tsx',
  'src/components/OptimizedIconButton.tsx',
  'src/components/IconLoadingFallback.tsx',
];

const filesToKeep = [
  'src/components/WorklyIcon.tsx',
  'src/components/SimpleIcon.tsx', // Gi·ªØ l·∫°i ƒë·ªÉ backward compatibility
  'src/components/IconTest.tsx',
];

function cleanupIcons() {
  console.log('üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp c√°c file icon c≈©...');

  // X√≥a c√°c file kh√¥ng c·∫ßn thi·∫øt
  filesToRemove.forEach(filePath => {
    const fullPath = path.join(__dirname, '..', filePath);
    if (fs.existsSync(fullPath)) {
      try {
        fs.unlinkSync(fullPath);
        console.log(`‚úÖ ƒê√£ x√≥a: ${filePath}`);
      } catch (error) {
        console.log(`‚ùå L·ªói khi x√≥a ${filePath}:`, error.message);
      }
    } else {
      console.log(`‚ö†Ô∏è  File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
    }
  });

  // Ki·ªÉm tra c√°c file c·∫ßn gi·ªØ l·∫°i
  console.log('\nüìã Ki·ªÉm tra c√°c file icon c·∫ßn gi·ªØ l·∫°i:');
  filesToKeep.forEach(filePath => {
    const fullPath = path.join(__dirname, '..', filePath);
    if (fs.existsSync(fullPath)) {
      console.log(`‚úÖ T·ªìn t·∫°i: ${filePath}`);
    } else {
      console.log(`‚ùå Thi·∫øu: ${filePath}`);
    }
  });

  console.log('\nüéØ T√≥m t·∫Øt:');
  console.log('- ƒê√£ lo·∫°i b·ªè c√°c component icon ph·ª©c t·∫°p');
  console.log('- Ch·ªâ s·ª≠ d·ª•ng @expo/vector-icons (MaterialCommunityIcons)');
  console.log('- WorklyIcon l√† component icon ch√≠nh th·ªëng');
  console.log('- T·∫•t c·∫£ icon ƒë·ªÅu load nhanh v√† ·ªïn ƒë·ªãnh');
  
  console.log('\n‚ú® Ho√†n th√†nh d·ªçn d·∫πp icon!');
}

if (require.main === module) {
  cleanupIcons();
}

module.exports = { cleanupIcons };
